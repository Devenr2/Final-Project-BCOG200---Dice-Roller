#This file is going to contain the code for my project. I need to outline the functions, classes and methods I will be using. 

OUTLINE

The first function of the program is going to be the input method for class creation.
This will need a visual component and a couple different things. 
I first want there to be a simple text box where the user inputs 7 items into the system. 
  -Each input will be a two digit number, with a range of 01-99. 
  -The seven inputs will be Character Level, and then each of the Six DnD stats. 
  -There will be text for improper inputs
After inputing the stats and level, the user then selects which proficiencies they have. They will be shown a list of all DnD skills

After inputing all this, the user will then be taken to the Dice Rolling screen

Clicking on the D20 is the most interesting. This will offer a variety of options in the form of different buttons and text boxes: shown below
    - Which Ability? (Text Box)
    - Which Skill? (Text Box)
    - Advantage / Disadvantage / Normal (Buttons)
    - Cursed / Bless / Guidence (Buttons)
After this, the dice will be rolled and the final total will be given to the user. There will also be specail messages for critical hits and misses.


CHARACTER CREATION
Input Level / Stats
    -These numbers will have to be saved and compared against an interal system
    -Level changes the characters proficiency mod
    -Raw Stat Number determines each Ability mod
    -Must be feedback when improper numbers are input
    -Planning to use GUI for visual components
    -Buttons for skills is a must, don't want the user having to type all that out
    -The proficiency bonus for each skill is taken from the hidden value of the user's level
    -Experts have doubled proficiency bonus
Dice Selector
    -If I can, reshape each button to look like the dice being selected
    -Each button opens up a secondary window for more selections (dice number/extra mod's)
    -Make is look nice, nobody wants a bland dice roller
Dice Roller
    -Use Numpy for random number generation
    -Do not forget to correctly do the math for the mod's and checks
    -Special messages when the random number is a 1 or 20 for d20 rolls
    -Advantage is running it twice and taking the greater number with disadvantage being the opposite
      -Compare the random numbers, take the higher/lower, THEN do the math
    -Cursed / bless / and guidence all add/subtract a d4 from the total of a roll
      -Do the roll and math, THEN random select a number 1-4 and add/subtract it from the other roll


Enter_Level



Enter_Stats

Determine_Prof_Bonus
---takes input from Enter_Level and Enter_Stats

Select_Skills

Determine_Skill_Bonus
---takes input from Select_Skills and Determine_Prof_Bonus

Select_Dice

Modify_Roll

--Has_Advantage

--Has_Disadvantage

--Input_Skill

--Is_Cursed

--Is_Blessed

--Has_Guidence

Roll_Dice

Post_Roll_Math

--Takes input from Determine_Skill_Bonus and Input_Skill

--Takes input from Is_Cursed, Is_Blessed and Has_Guidence

Display_Result

CODE IN PROGRESS BELOW (I will be copy-pasting from my sublime text)

import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Set up the display
WIDTH, HEIGHT = 800, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("D&D Dice Roller")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Font
font = pygame.font.SysFont(None, 30)

def input_box(prompt):
    user_input = ""
    active = True
    while active:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    active = False
                elif event.key == pygame.K_BACKSPACE:
                    user_input = user_input[:-1]
                else:
                    user_input += event.unicode

        screen.fill(WHITE)
        text_surface = font.render(prompt + " " + user_input, True, BLACK)
        screen.blit(text_surface, (50, 50))
        pygame.display.flip()

    return user_input

def input_character_info():
    name = input_box("Enter character's name:")
    class_ = input_box("Enter character's class:")
    
    # Level Input
    while True:
        level_str = input_box("Enter character's level:")
        try:
            level = int(level_str)
            if level <= 0:
                raise ValueError("Level must be a positive integer.")
            break
        except ValueError as e:
            error_message(e)

    # Stat Inputs
    stats = {}
    stat_names = ['Strength', 'Dexterity', 'Constitution', 'Intelligence', 'Wisdom', 'Charisma']
    for stat_name in stat_names:
        while True:
            stat_str = input_box(f"Enter {stat_name}:")
            try:
                stat_value = int(stat_str)
                if not (1 <= stat_value <= 20):
                    raise ValueError("Stat value must be between 1 and 20.")
                stats[stat_name] = stat_value
                break
            except ValueError as e:
                error_message(e)

    return name, class_, level, stats

def error_message(message):
    error_font = pygame.font.SysFont(None, 20)
    error_surface = error_font.render(str(message), True, (255, 0, 0))
    screen.blit(error_surface, (50, 150))  # Adjust the position as needed
    pygame.display.flip()
    pygame.time.wait(2000)  # Display the error message for 2 seconds

def roll_dice():
    return random.randint(1, 20)

# Input character information
name, class_, level, stats = input_character_info()
print("Character information:")
print("Name:", name)
print("Class:", class_)
print("Level:", level)
print("Stats:", stats)

# Main loop
rolling = False
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                rolling = True
                result = roll_dice()
                print("You rolled a", result)

    screen.fill(WHITE)

    if not rolling:
        # Display character information
        text = "Name: {} {} {}".format(name, class_, level)
        text_surface = font.render(text, True, BLACK)
        screen.blit(text_surface, (50, 50))
    else:
        # Display character name and result
        header_text = font.render(name, True, BLACK)
        screen.blit(header_text, (50, 50))

        if result == 20:
            roll_text = font.render("Critical hit! You rolled a natural 20!", True, BLACK)
        elif result == 1:
            roll_text = font.render("Critical fail! You rolled a natural 1!", True, BLACK)
        else:
            roll_text = font.render("You rolled a {}".format(result), True, BLACK)
        
        screen.blit(roll_text, (50, 100))

    # Update the display
    pygame.display.flip()

# Quit Pygame
pygame.quit()
sys.exit()
